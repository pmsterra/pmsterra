variable "cmek_key" {
  description = "GCP Customer-Managed Encryption Key (CMEK)"
  type        = string

  validation {
    condition = can(regex("^projects/.+/locations/.+/keyRings/.+/cryptoKeys/.+$", var.cmek_key))
    error_message = "Invalid CMEK key format. It should be in the format 'projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{cryptoKey}'."
  }
}

#name overriding
locals {
  final_resource_name = var.override_name ? "new_name" : var.resource_name
}



#start
from google.cloud.devtools import cloudbuild_v1
from os import environ






def my_run_build_trigger():
    # Create a client
    client = cloudbuild_v1.CloudBuildClient()

    # Initialize request argument(s)
    request = cloudbuild_v1.RunBuildTriggerRequest(
        project_id=environ["project_id"],
        trigger_id=environ["trigger_id"],
    )

    # Make the request
    operation = client.run_build_trigger(request=request)

    print("Waiting for operation to complete...")

    response = operation.result()

    # Handle the response
    print(response)
#end


functions-framework==3.*
google-cloud-build

# sample pubsub
import base64
import functions_framework

Working- Gen 1

import base64
from google.cloud.devtools import cloudbuild_v1

from google.auth import compute_engine

def hello_pubsub(event, context):
    """Triggered from a message on a Cloud Pub/Sub topic.
    Args:
         event (dict): Event payload.
         context (google.cloud.functions.Context): Metadata for the event.
    """
    pubsub_message = base64.b64decode(event['data']).decode('utf-8')
    print(pubsub_message)

    # Authenticate using Compute Engine default credentials
    credentials = compute_engine.Credentials()

    # Initialize the Cloud Build client
    client = cloudbuild_v1.services.cloud_build.CloudBuildClient(credentials=credentials)

    # Name of the existing Cloud Build trigger to be executed
    trigger_name = 'projects/turing-alcove-384403/triggers/new-nopub'  # Replace with your project ID and trigger ID

    # Run the Cloud Build trigger
    #operation = client.run_build_trigger(name=new-nopub)
    request = cloudbuild_v1.RunBuildTriggerRequest(
        project_id="turing-alcove-384403",
        #trigger_id="new-nopub",
        name="projects/turing-alcove-384403/locations/us-central1/triggers/new-nopub",
    )

    # Make the request
    operation = client.run_build_trigger(request=request)


    print('Triggered build:', operation.metadata.build.id)

Requirement
# Function dependencies, for example:
# package>=version
google-cloud-build
functions-framework




# Triggered from a message on a Cloud Pub/Sub topic.
@functions_framework.cloud_event
def hello_pubsub(cloud_event):
    # Print out the data from Pub/Sub, to prove that it worked
    print(base64.b64decode(cloud_event.data["message"]["data"]))

ref:  syntax for build run in python: https://cloud.google.com/python/docs/reference/cloudbuild/latest/google.cloud.devtools.cloudbuild_v1.types.RunBuildTriggerRequest

# with Varible
import base64
from google.cloud.devtools import cloudbuild_v1
from os import environ
from google.auth import compute_engine

def hello_pubsub(event, context):
    """Triggered from a message on a Cloud Pub/Sub topic.
    Args:
         event (dict): Event payload.
         context (google.cloud.functions.Context): Metadata for the event.
    """
    pubsub_message = base64.b64decode(event['data']).decode('utf-8')
    print(pubsub_message)

    # Authenticate using Compute Engine default credentials
    credentials = compute_engine.Credentials()

    # Initialize the Cloud Build client
    client = cloudbuild_v1.services.cloud_build.CloudBuildClient(credentials=credentials)

    # Name of the existing Cloud Build trigger to be executed
    #trigger_name = 'projects/turing-alcove-384403/triggers/new-nopub'  # Replace with your project ID and trigger ID
    project=environ.get('project_id')
    trigger=environ.get('trigger_id')
    region=environ.get('location')
    # Run the Cloud Build trigger
    #operation = client.run_build_trigger(name=new-nopub)
    request = cloudbuild_v1.RunBuildTriggerRequest(
        project_id=project,
        #trigger_id="new-nopub",
        name=f'projects/{project}/locations/{region}/triggers/{trigger}',
    )

    # Make the request
    operation = client.run_build_trigger(request=request)


    print('Triggered build:', operation.metadata.build.id)




resource "google_discovery_engine_data_store" "test_data_store" {
  location                    = "global" //The value can only be one of "global", "us" and "eu".
  data_store_id               = "data-store-${local.name_suffix}"
  display_name                = "Structured datastore"
  industry_vertical           = "GENERIC" //GENERIC, MEDIA
  content_config              = "NO_CONTENT" //NO_CONTENT, CONTENT_REQUIRED, PUBLIC_WEBSITE.
  solution_types              = ["SOLUTION_TYPE_CHAT"]
  //SOLUTION_TYPE_RECOMMENDATION, SOLUTION_TYPE_SEARCH, SOLUTION_TYPE_CHAT.
  create_advanced_site_search = true
  project = local.project
  
}

resource "google_discovery_engine_data_store" "test_data_store_2" {
  location                    = google_discovery_engine_data_store.test_data_store.location
  data_store_id               = "data-store-2-${local.name_suffix}"
  display_name                = "Structured datastore 2"
  industry_vertical           = "GENERIC"
  content_config              = "NO_CONTENT"
  solution_types              = ["SOLUTION_TYPE_CHAT"]
    project = local.project

}

resource "google_discovery_engine_chat_engine" "primary" {
  //min 5.15
  project = local.project
  engine_id = "chat-engine-id-${local.name_suffix}"
  collection_id = "default_collection"
  location = google_discovery_engine_data_store.test_data_store.location
  display_name = "Chat engine"
  industry_vertical = "GENERIC"
  data_store_ids = [google_discovery_engine_data_store.test_data_store.data_store_id, google_discovery_engine_data_store.test_data_store_2.data_store_id]
  
  common_config {
    company_name = "test-company"
  }
  chat_engine_config {
    

    agent_creation_config {
    business = "test business name"
    default_language_code = "en"
    time_zone = "America/Los_Angeles"
    location = google_discovery_engine_data_store.test_data_store.location


  }
  }
  


  
}





output "name" {
  value = flatten([google_storage_bucket.test[*].name,google_storage_bucket.test_end[*].name])[0]
}
